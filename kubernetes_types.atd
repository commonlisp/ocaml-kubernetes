type id = string
type metadata = (string * string) list

type port = { containerPort: int; hostPort: int }

type path = {
	path: string;
	port: string;
}

type livenessProbe = {
	enabled: bool;
	ty: string <json name="type">;
	initialDelaySeconds: int;
	httpGet: path;
}

type container = {
	name: string; 
	image: string; 
	ports: port list;
	?livenessProbe: livenessProbe option
	}

type manifest = { 
	version: string;
	id: string; 
	containers: container list 
	}

type property = [
	Manifest of manifest <json name="manifest">
	| Status <json name="status">
	| Host <json name="host">
	| HostIP <json name="hostIP">
	| Info <json name="info">
	]
type desiredState = { manifest: manifest }

type currentState = { 
	properties: property list	
}

type pod = { 
	kind: string; 
	apiVersion: string;
	id: string; 
	desiredState: desiredState;
	?currentState: currentState option;
	}

type selector = { name : id }
type replicationState = { 
     replicas : int; 
     replicaSelector : selector; 
     podTemplate : manifest 
}

type replicationController = { 
     id: string; 
     apiVersion: string;
     kind: string; (* "ReplicationController" *)
     creationTimestamp: string;
     selfLink: string;
     desiredState: replicationState 
}

type service = { 
     kind : string; 
     id : id; 
     creationTimestamp: string;
     selfLink: string;
     name: string;
     port: int; 
     containerPort: string;
     labels : selector; 
     selector: selector 
}

type resourceTy = 
    [ Pod of pod
    | ReplicationController of replicationController
    | Service of service ]

type resource = [ Resource of (id * metadata * resourceTy) ]
